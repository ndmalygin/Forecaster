@page "/graphdata"
@using ForecastsWebApp.Data
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Util
@inject WeatherForecastService ForecastService

<PageTitle>Weather graph data</PageTitle>

<h1>Weather graph data</h1>

<p>This component demonstrates fetching data from a weather collection service to plots.</p>

@if (_temperature == null)
{
    <p>
    <em>Loading...</em>
</p>
}
else
{
    <table class="form-control" style="border:0">
    <tr style="height:50px; padding-bottom:10px">
        <td style="width:150px; padding-left:5px; padding-bottom:15px">
            <select class="form-control" style="width:150px" @onchange=SelectedCityChanged>
                @foreach (var template in cityTemplates)
                    {
                        <option value=@template>@template</option>
                    }
                </select>
            </td>
            <td style="width:150px; padding-left:5px; padding-bottom:15px">
                <select class="form-control" style="width:150px" @onchange=SelectedPeriodChanged>
                    @foreach (var template in periodTemplates)
                    {
                        <option value=@template>@template</option>
                    }
                </select>
            </td>
            <td style="width:150px; padding-left:5px; padding-bottom:15px">
                <button class="form-control" @onclick="Toggle">@Caption</button>
            </td>
        </tr>
    </table>
    <div class="form-control" style="border: 0; display:flex;  justify-content: center;  padding: 3px;">
        <div class="form-control">
            <Chart Config="_temperature"></Chart>
        </div>
        <div class="form-control">
            <Chart Config="_pressure"></Chart>
        </div>
    </div>
    <div class="form-control" style="border: 0; display:flex;  justify-content: center;  padding: 3px;">
        <div class="form-control">
            <Chart Config="_humidity"></Chart>
        </div>
        <div class="form-control">
            <Chart Config="_speed"></Chart>
        </div>
    </div>
}

@code {
    private readonly LineConfig _temperature = new();
    private readonly LineConfig _pressure = new();
    private readonly LineConfig _humidity = new();
    private readonly LineConfig _speed = new();

    private string selectedCity = string.Empty;
    private string selectedPeriod = string.Empty;
    private string[] cityTemplates = { "Select city" };
    private string[] periodTemplates = { "Select period", "Day", "Week", "Month", "All" };
    private string Caption => allValuesMode ? "Unique values" : "All values";
    private bool allValuesMode = true;

    private void Toggle()
    {
        allValuesMode = !allValuesMode;
        LoadData();
    }

    private void SelectedPeriodChanged(ChangeEventArgs e)
    {
        selectedPeriod = e.Value?.ToString() ?? periodTemplates[0];
        LoadData();
    }
    private void SelectedCityChanged(ChangeEventArgs e)
    {
        selectedCity = e.Value?.ToString() ?? cityTemplates[0];
        LoadData();
    }

    private async void LoadData()
    {
        if (string.IsNullOrEmpty(selectedCity) || string.IsNullOrEmpty(selectedPeriod))
            return;

        _temperature.Data.Labels.Clear();
        _temperature.Data.Datasets.Clear();
        _pressure.Data.Labels.Clear();
        _pressure.Data.Datasets.Clear();
        _humidity.Data.Labels.Clear();
        _humidity.Data.Datasets.Clear();
        _speed.Data.Labels.Clear();
        _speed.Data.Datasets.Clear();

        var forecastsArr = await ForecastService.GetForecastAsync(selectedCity, selectedPeriod, allValuesMode);
        var labels = forecastsArr.Select(v => v.Date);
        foreach (var label in labels)
        {
            _temperature.Data.Labels.Add(label.ToString());
            _pressure.Data.Labels.Add(label.ToString());
            _humidity.Data.Labels.Add(label.ToString());
            _speed.Data.Labels.Add(label.ToString());
        }

        var temperature = forecastsArr.Select(v => v.Main.Temperature);
        var datasetT = new LineDataset<double>(temperature)
            {
                BackgroundColor = ColorUtil.ColorHexString(255, 99, 132),
                Label = "Temperature (C)"
            };
        var pressure = forecastsArr.Select(v => v.Main.Pressure);
        var datasetP = new LineDataset<double>(pressure)
            {
                BackgroundColor = ColorUtil.ColorHexString(75, 192, 192),
                Label = "Pressure (hPa)"
            };
        var humidity = forecastsArr.Select(v => v.Main.Humidity);
        var datasetH = new LineDataset<double>(humidity)
            {
                BackgroundColor = ColorUtil.ColorHexString(54, 162, 235),
                Label = "Humidity (%)"
            };
        var speed = forecastsArr.Select(v => v.Wind.Speed);
        var datasetS = new LineDataset<double>(speed)
            {
                BackgroundColor = ColorUtil.ColorHexString(255, 205, 86),
                Label = "Wind (m/s)"
            };

        _temperature.Data.Datasets.Add(datasetT);
        _pressure.Data.Datasets.Add(datasetP);
        _humidity.Data.Datasets.Add(datasetH);
        _speed.Data.Datasets.Add(datasetS);
    }

    protected override async Task OnInitializedAsync()
    {
        cityTemplates = cityTemplates.Union(await ForecastService.GetCitiesNamesAsync()).ToArray();
    }
}