@page "/weather"
@using Config.Net
@using ForecastsCommon
@using ForecastsRabbitMQDispatcher
@using System.Collections.Concurrent
<PageTitle>Current weather</PageTitle>

<h1>Current weather</h1>
<p>This component demonstrates fetching current weather data from RabbitMQ.</p>

<table class="table">
    <thead>
    <tr>
        <th>City</th>
        <th>Date</th>
        <th>Temperature (C)</th>
        <th>Pressure (hPa)</th>
        <th>Humidity (%)</th>
        <th>Wind (m/s)</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var forecast in forecasts.Values)
    {
        <tr>
            <td>@forecast.City</td>
            <td>@forecast.Date</td>
            <td>@forecast.Main.Temperature</td>
            <td>@forecast.Main.Pressure</td>
            <td>@forecast.Main.Humidity</td>
            <td>@forecast.Wind.Speed</td>
        </tr>
    }
    </tbody>
</table>

@code {
    private readonly ConcurrentDictionary<string, ForecastsCommon.JsonEntities.Weather> forecasts = new();

    protected override void OnInitialized()
    {
        var settings = new ConfigurationBuilder<ISettings>()
            .UseIniFile(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "forecaster.ini"))
            .Build();

        var weatherExtractor = new WeatherExtractor();
        var rabbitMQDispatcher = new RabbitMQDispatcher(settings.rabbitmq_connection);
        rabbitMQDispatcher.Received += (_, message) =>
        {
            try
            {
                var weather = weatherExtractor.ExtractMandatoryDataObject(message);
                forecasts[weather.City] = weather;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                throw;
            }

            InvokeAsync(() => { StateHasChanged(); });
        };

        rabbitMQDispatcher.ConsumeMessage();
    }

}