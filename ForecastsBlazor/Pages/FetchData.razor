@page "/fetchdata"
@using ForecastsBlazor.Data
@inject WeatherForecastService ForecastService

<PageTitle>Weather data</PageTitle>

<h1>Weather data</h1>

<p>This component demonstrates fetching data from a weather collection service.</p>

@if (templates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
    <select class="form-control" style="width:150px" @onchange=SelectedCityChanged>
        @foreach (var template in templates)
            {
                <option value=@template>@template</option>
            }
        </select>
    </p>

    <table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temperature (C)</th>
            <th>Pressure (hPa)</th>
            <th>Humidity (%)</th>
            <th>Wind (m/s)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date</td>
                    <td>@forecast.Main.Temperature</td>
                    <td>@forecast.Main.Pressure</td>
                    <td>@forecast.Main.Humidity</td>
                    <td>@forecast.Wind.Speed</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ForecastsCommon.JsonEntities.Weather[] forecasts = new ForecastsCommon.JsonEntities.Weather[0];
    private string selectedCity = string.Empty;
    private string[] templates = new string[] { "Select city" };

    private async void SelectedCityChanged(ChangeEventArgs e)
    {
        selectedCity = e.Value?.ToString() ?? templates[0];
        forecasts = await ForecastService.GetForecastAsync(selectedCity);
    }
    protected override async Task OnInitializedAsync()
    {
        templates = templates.Union(await ForecastService.GetCitiesNamesAsync()).ToArray();
    }
}
